searchData={"items":[{"type":"module","title":"FileListCreator","doc":"Documentation for `FileListCreator`.\n\nThis module serves to create file list, which is needed for concatenating video files using ffmpeg","ref":"FileListCreator.html"},{"type":"function","title":"FileListCreator.create_file_list/2","doc":"Use this function to generate file_list.txt file containing file format for ffmpeg\n  - first arugment is a folder containing the files\n  - second is the output, include name of the txt file too (e.g. file_list.txt)\n\n  https://trac.ffmpeg.org/wiki/Concatenate","ref":"FileListCreator.html#create_file_list/2"},{"type":"function","title":"FileListCreator.list_ts_files/1","doc":"","ref":"FileListCreator.html#list_ts_files/1"},{"type":"module","title":"Runner","doc":"Documentation for `Runner` module.\n\n  Module for executing shell commands","ref":"Runner.html"},{"type":"function","title":"Runner.get_metadata/1","doc":"This loads metadata and return json to console","ref":"Runner.html#get_metadata/1"},{"type":"function","title":"Runner.run_commands_parallel/1","doc":"Main function to run multiple porcelain shell commands in parallel\n\n  use functions from `Videoprocess` to prepare command","ref":"Runner.html#run_commands_parallel/1"},{"type":"function","title":"Runner.run_porcelain_command/1","doc":"Main function to run porcelain shell command\n\n  use functions from `Videoprocess` to prepare command\n\n  Error are logged in log/error.log file using `Logger`","ref":"Runner.html#run_porcelain_command/1"},{"type":"module","title":"Videoprocess","doc":"Documentation for `Videoprocess`.\n\n  Wrapper module for ffmpeg providing various video and audio operations\n\n  This module only prepares the command, for running, supply the command to `Runner`","ref":"Videoprocess.html"},{"type":"function","title":"Videoprocess.concat_multimedia/2","doc":"ffmpeg function for concatenating video/audio samples\n\n  create filelist first (see `FileListCreator` module)\n\n  -y is for always overwrite","ref":"Videoprocess.html#concat_multimedia/2"},{"type":"function","title":"Parameters - Videoprocess.concat_multimedia/2","doc":"- filelist_path: path to file_list.txt.\n  - out_path: output concatenated video/audio file (e.g. output.ts/output.mp3).","ref":"Videoprocess.html#concat_multimedia/2-parameters"},{"type":"function","title":"Videoprocess.filepath/3","doc":"prepare filename accroding to hash and out folder with extension","ref":"Videoprocess.html#filepath/3"},{"type":"function","title":"Parameters - Videoprocess.filepath/3","doc":"- filelist_path: path to file_list.txt.\n  - out_path: output concatenated video/audio file (e.g. output.ts/output.mp3).\n\n  input files are: something/1050440-something\n  output is: out_folder/1050440.png","ref":"Videoprocess.html#filepath/3-parameters"},{"type":"function","title":"Videoprocess.save_audio/3","doc":"ffmpeg extract and save audio only","ref":"Videoprocess.html#save_audio/3"},{"type":"function","title":"Parameters - Videoprocess.save_audio/3","doc":"- video_path: path to input video.\n  - out_dir: output directory without filename.\n  - extension: (.mp3|.aac|.wav|.ogg)","ref":"Videoprocess.html#save_audio/3-parameters"},{"type":"function","title":"Videoprocess.save_images/3","doc":"ffmpeg extract images from video by specified fps\n\n  supply the whole video, you may want to use concat function first","ref":"Videoprocess.html#save_images/3"},{"type":"function","title":"Videoprocess.save_images_map/1","doc":"ffmpeg extract images from video by specified fps\n\n  supply list of video files\n\n  returns list of commands, suitable to be suplied for `Runner` parallel running","ref":"Videoprocess.html#save_images_map/1"},{"type":"function","title":"Parameters - Videoprocess.save_images_map/1","doc":"Hash containing:\n  - video (list of video files paths)\n  - outfolder\n  - fps","ref":"Videoprocess.html#save_images_map/1-parameters"},{"type":"function","title":"Videoprocess.save_video/2","doc":"ffmpeg extract and save video only\n\n  extension matches the input's extension","ref":"Videoprocess.html#save_video/2"},{"type":"function","title":"Parameters - Videoprocess.save_video/2","doc":"- video_path: path to input video.\n  - out_dir: output directory without filename.","ref":"Videoprocess.html#save_video/2-parameters"},{"type":"function","title":"Videoprocess.save_video/3","doc":"ffmpeg extract and save video only\n  extension matches the input's extension","ref":"Videoprocess.html#save_video/3"},{"type":"function","title":"Parameters - Videoprocess.save_video/3","doc":"- video_path: path to input video.\n  - out_dir: output directory without filename.\n  - extension: (.mp4|.mkv|.avi|.ts|.h264)","ref":"Videoprocess.html#save_video/3-parameters"},{"type":"function","title":"Videoprocess.split_multimedia/3","doc":"split input multimedia into segments of length `time` seconds","ref":"Videoprocess.html#split_multimedia/3"},{"type":"function","title":"Parameters - Videoprocess.split_multimedia/3","doc":"- file_path: path to input video/audio.\n  - out_dir: output directory without filename.\n  - extension: (.mp3|.aac|.wav|.ogg)","ref":"Videoprocess.html#split_multimedia/3-parameters"},{"type":"function","title":"Videoprocess.wav_to_pcm/1","doc":"for PCM sampling","ref":"Videoprocess.html#wav_to_pcm/1"},{"type":"extras","title":"README","doc":"[![Documentation](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://moderntv-ailab.github.io/videoprocess/)\n[![GitHub repo](https://img.shields.io/badge/GitHub-Repository-blue)](https://github.com/ModernTV-AILAB/videoprocess)\n[![GitHub Actions Status](https://github.com/ModernTV-AILAB/videoprocess/actions/workflows/test.yml/badge.svg)](https://github.com/ModernTV-AILAB/videoprocess/actions/workflows/test.yml)\n\n\n\n\n\n\n# Videoprocess\n\nWrapper for ffmpeg, requires ffmpeg to be available on path (https://www.ffmpeg.org/)","ref":"readme.html"},{"type":"extras","title":"Installation - README","doc":"Not available in hex due to legal reasons, use:\n```\nmix deps.get\n```\nand\n```\nmix test\n```\nor\n```\nmix run example/example.exs\n```","ref":"readme.html#installation"},{"type":"extras","title":"Usage - README","doc":"for running examples, refer to example/ folder and use\n\n```\nmix run example.exs\n```\n\n---","ref":"readme.html#usage"},{"type":"extras","title":"Errors - README","doc":"if any error occurs when running Porcelain command, it is logged in log/error.log\n\n# Multimedia Processing with Elixir\n\nThis document provides an example of how to use Elixir functions to process video and audio data. Below are the steps to split, concatenate, and extract audio/video/images from multimedia files using Elixir modules and functions.","ref":"readme.html#errors"},{"type":"extras","title":"Prerequisites - README","doc":"Ensure you have the following modules available:\n- `Videoprocess`: Handles various video and audio processing operations.\n- `FileListCreator`: Helps create file lists for concatenation.\n- `Runner`: Executes commands for processing.","ref":"readme.html#prerequisites"},{"type":"extras","title":"Usage Examples - README","doc":"","ref":"readme.html#usage-examples"},{"type":"extras","title":"1. Splitting a Video File - README","doc":"Split a `.ts` video file into 10-second segments.\n\n```elixir\nVideoprocess.split_multimedia(\"example/input/input01_ocean.ts\", \"example/output\", 10) \n|> Runner.run_porcelain_command\n```\n\n- **Input**: `\"example/input/input01_ocean.ts\"`\n- **Output Directory**: `\"example/output\"`\n- **Split Duration**: `10` seconds per segment","ref":"readme.html#1-splitting-a-video-file"},{"type":"extras","title":"2. Creating a File List of Split Segments - README","doc":"Create a list of `.ts` files in the output directory for further processing.\n\n```elixir\nfiles = FileListCreator.list_ts_files(\"example/output\") |> IO.inspect\nFileListCreator.create_file_list(files, \"example/output/filelist/filelist.txt\")\n```\n\n- **Directory to Search**: `\"example/output\"`\n- **File List Output**: `\"example/output/filelist/filelist.txt\"`","ref":"readme.html#2-creating-a-file-list-of-split-segments"},{"type":"extras","title":"3. Concatenating the Split Segments - README","doc":"Concatenate the split segments back into a single file.\n\n```elixir\nVideoprocess.concat_multimedia(\"example/output/filelist/filelist.txt\", \"example/output/concat/concat.ts\") \n|> Runner.run_porcelain_command\n```\n\n- **File List Input**: `\"example/output/filelist/filelist.txt\"`\n- **Concatenated Output**: `\"example/output/concat/concat.ts\"`","ref":"readme.html#3-concatenating-the-split-segments"},{"type":"extras","title":"4. Saving Images from a Video - README","doc":"Save images from the first video segment (or any specified `.ts` file) at a specific interval.\n\n```elixir\nVideoprocess.save_images(Enum.at(files, 0), \"example/output/images\", 1) \n|> Runner.run_porcelain_command\n```\n\n- **Video Input**: The first file from the `files` list.\n- **Output Directory**: `\"example/output/images\"`\n- **Frames per Second (FPS)**: `1` frame per second","ref":"readme.html#4-saving-images-from-a-video"},{"type":"extras","title":"5. Extracting Images from Multiple Video Segments - README","doc":"Extract images from a list of video segments, saving them to an output folder with a specified FPS.\n\n```elixir\nVideoprocess.save_images_map(%{\n  video: files, \n  outfolder: \"example/output/imagesmap\", \n  fps: 100\n}) \n|> Runner.run_commands_parallel\n```\n\n- **Video Input List**: `files` (list of `.ts` files)\n- **Output Directory**: `\"example/output/imagesmap\"`\n- **Frames per Second (FPS)**: `100` frames per second","ref":"readme.html#5-extracting-images-from-multiple-video-segments"},{"type":"extras","title":"6. Extracting Audio Only - README","doc":"Extract only the audio track from the original `.ts` video file and save it as a `.wav` file.\n\n```elixir\nVideoprocess.save_audio(\"example/input/input01_ocean.ts\", \"example/output/audio\", \".wav\") \n|> Runner.run_porcelain_command\n```\n\n- **Video Input**: `\"example/input/input01_ocean.ts\"`\n- **Audio Output Directory**: `\"example/output/audio\"`\n- **Audio Format**: `.wav`","ref":"readme.html#6-extracting-audio-only"},{"type":"extras","title":"7. Extracting Video Only - README","doc":"Extract only the video track from the original `.ts` video file and save it as an `.mp4` file.\n\n```elixir\nVideoprocess.save_video(\"example/input/input01_ocean.ts\", \"example/output/video\", \".mp4\") \n|> Runner.run_porcelain_command\n```\n\n- **Video Input**: `\"example/input/input01_ocean.ts\"`\n- **Video Output Directory**: `\"example/output/video\"`\n- **Video Format**: `.mp4`","ref":"readme.html#7-extracting-video-only"},{"type":"extras","title":"Summary - README","doc":"This example shows how to:\n- Split a video file into segments.\n- Generate a file list for concatenation.\n- Concatenate video segments back together.\n- Extract images at a specified frame rate.\n- Extract audio and video separately.\n\nEach function provided by the `Videoprocess` module can be run as shown, with parameters tailored to the type of multimedia processing required.","ref":"readme.html#summary"}],"content_type":"text/markdown","producer":{"name":"ex_doc","version":[48,46,51,52,46,50]}}